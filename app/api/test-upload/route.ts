import { NextResponse } from "next/server"
import { initGoogleAPIs, getSpreadsheetId, getDriveFolderId } from "@/lib/google-service"

// ƒê·∫£m b·∫£o API route n√†y ch·∫°y trong Node.js runtime
export const runtime = "nodejs"

export async function POST(request: Request) {
  console.log("üîç B·∫Øt ƒë·∫ßu qu√° tr√¨nh ki·ªÉm tra t·∫£i l√™n...")

  try {
    const formData = await request.formData()
    const file = formData.get("file") as File

    if (!file) {
      console.log("‚ùå Kh√¥ng c√≥ file trong y√™u c·∫ßu")
      return NextResponse.json({ success: false, error: "Kh√¥ng c√≥ file ƒë∆∞·ª£c cung c·∫•p" }, { status: 400 })
    }

    console.log(`üìÅ ƒê√£ nh·∫≠n file: ${file.name}, k√≠ch th∆∞·ªõc: ${file.size} bytes, lo·∫°i: ${file.type}`)

    // Kh·ªüi t·∫°o Google APIs
    const { drive, sheets } = initGoogleAPIs()
    const DRIVE_FOLDER_ID = getDriveFolderId()
    const SPREADSHEET_ID = getSpreadsheetId()
    const SHEET_NAME = "Sheet1"

    // B∆∞·ªõc 1: Ki·ªÉm tra k·∫øt n·ªëi Google Drive API
    console.log("B∆∞·ªõc 1: Ki·ªÉm tra k·∫øt n·ªëi Google Drive API...")
    try {
      const aboutResponse = await drive.about.get({
        fields: "user,storageQuota",
      })
      console.log("‚úÖ K·∫øt n·ªëi Google Drive API th√†nh c√¥ng")
      console.log(`üë§ Ng∆∞·ªùi d√πng: ${aboutResponse.data.user?.displayName}`)
    } catch (error) {
      console.error("‚ùå K·∫øt n·ªëi Google Drive API th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "drive_connection",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 2: Ki·ªÉm tra k·∫øt n·ªëi Google Sheets API
    console.log("B∆∞·ªõc 2: Ki·ªÉm tra k·∫øt n·ªëi Google Sheets API...")
    try {
      const sheetResponse = await sheets.spreadsheets.get({
        spreadsheetId: SPREADSHEET_ID,
      })
      console.log("‚úÖ K·∫øt n·ªëi Google Sheets API th√†nh c√¥ng")
      console.log(`üìä Ti√™u ƒë·ªÅ b·∫£ng t√≠nh: ${sheetResponse.data.properties?.title}`)
    } catch (error) {
      console.error("‚ùå K·∫øt n·ªëi Google Sheets API th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "sheets_connection",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 3: Ki·ªÉm tra quy·ªÅn truy c·∫≠p th∆∞ m·ª•c Drive
    console.log("B∆∞·ªõc 3: Ki·ªÉm tra quy·ªÅn truy c·∫≠p th∆∞ m·ª•c Drive...")
    try {
      const folderResponse = await drive.files.get({
        fileId: DRIVE_FOLDER_ID,
        fields: "id,name,capabilities",
      })
      console.log("‚úÖ Truy c·∫≠p th∆∞ m·ª•c Drive th√†nh c√¥ng")
      console.log(`üìÅ T√™n th∆∞ m·ª•c: ${folderResponse.data.name}`)
      console.log(`üîë C√≥ th·ªÉ ch·ªânh s·ª≠a: ${folderResponse.data.capabilities?.canEdit}`)
    } catch (error) {
      console.error("‚ùå Truy c·∫≠p th∆∞ m·ª•c Drive th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "folder_access",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 4: Chuy·ªÉn ƒë·ªïi file th√†nh buffer v√† base64
    console.log("B∆∞·ªõc 4: Chuy·ªÉn ƒë·ªïi file th√†nh buffer v√† base64...")
    let fileBuffer: Buffer
    let base64Data: string
    try {
      const arrayBuffer = await file.arrayBuffer()
      fileBuffer = Buffer.from(arrayBuffer)
      base64Data = fileBuffer.toString("base64")
      console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi file th√†nh buffer, k√≠ch th∆∞·ªõc: ${fileBuffer.length} bytes`)
    } catch (error) {
      console.error("‚ùå Chuy·ªÉn ƒë·ªïi file th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "file_conversion",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 5: T·∫£i l√™n Google Drive
    console.log("B∆∞·ªõc 5: ƒêang t·∫£i l√™n Google Drive...")
    let fileId: string
    let webViewLink: string
    try {
      // Gi·ªØ nguy√™n t√™n file g·ªëc nh∆∞ng th√™m ti·ªÅn t·ªë ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
      const originalFileName = file.name
      const uniqueFilename = `test_${Date.now()}_${originalFileName}`

      // S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p t·∫£i l√™n v·ªõi base64 string
      const response = await drive.files.create({
        requestBody: {
          name: uniqueFilename,
          parents: [DRIVE_FOLDER_ID],
          mimeType: file.type,
        },
        media: {
          mimeType: file.type,
          body: base64Data, // S·ª≠ d·ª•ng base64 string thay v√¨ buffer
        },
        fields: "id,webViewLink,webContentLink",
      })

      fileId = response.data.id
      webViewLink = response.data.webViewLink
      console.log(`‚úÖ ƒê√£ t·∫£i file l√™n th√†nh c√¥ng, ID: ${fileId}`)
      console.log(`üîó Link xem web: ${webViewLink}`)
    } catch (error) {
      console.error("‚ùå T·∫£i file l√™n th·∫•t b·∫°i:", error)
      console.error("Chi ti·∫øt l·ªói:", error.message)
      return NextResponse.json(
        {
          success: false,
          step: "file_upload",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 6: ƒê·∫∑t quy·ªÅn truy c·∫≠p file
    console.log("B∆∞·ªõc 6: ƒê·∫∑t quy·ªÅn truy c·∫≠p file...")
    try {
      await drive.permissions.create({
        fileId: fileId,
        requestBody: {
          role: "reader",
          type: "anyone",
        },
        fields: "id",
      })
      console.log("‚úÖ ƒê·∫∑t quy·ªÅn truy c·∫≠p file th√†nh c√¥ng")
    } catch (error) {
      console.error("‚ùå ƒê·∫∑t quy·ªÅn truy c·∫≠p file th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "set_permissions",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 7: X√°c minh kh·∫£ nƒÉng truy c·∫≠p file
    console.log("B∆∞·ªõc 7: X√°c minh kh·∫£ nƒÉng truy c·∫≠p file...")
    try {
      const verifyResponse = await drive.files.get({
        fileId: fileId,
        fields: "id,name,webViewLink,shared,thumbnailLink",
      })
      console.log("‚úÖ X√°c minh file th√†nh c√¥ng")
      console.log(`üîí File ƒë√£ ƒë∆∞·ª£c chia s·∫ª: ${verifyResponse.data.shared}`)
      console.log(`üñºÔ∏è Thumbnail link: ${verifyResponse.data.thumbnailLink || "Kh√¥ng c√≥"}`)
    } catch (error) {
      console.error("‚ùå X√°c minh file th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "verify_file",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // B∆∞·ªõc 8: Th√™m m·ª•c th·ª≠ nghi·ªám v√†o Google Sheets
    console.log("B∆∞·ªõc 8: Th√™m m·ª•c th·ª≠ nghi·ªám v√†o Google Sheets...")
    try {
      const today = new Date().toISOString().split("T")[0]
      // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng link thumbnail ƒë·ªÉ xem tr·ª±c ti·∫øp
      const directLink = `/api/image-proxy/${fileId}`

      await sheets.spreadsheets.values.append({
        spreadsheetId: SPREADSHEET_ID,
        range: `${SHEET_NAME}!A:G`,
        valueInputOption: "USER_ENTERED",
        insertDataOption: "INSERT_ROWS",
        resource: {
          values: [[today, "Test", "Test Upload", "1000", "expense", directLink, new Date().toISOString()]],
        },
      })
      console.log("‚úÖ ƒê√£ th√™m m·ª•c th·ª≠ nghi·ªám v√†o Google Sheets")
    } catch (error) {
      console.error("‚ùå Th√™m m·ª•c th·ª≠ nghi·ªám th·∫•t b·∫°i:", error)
      return NextResponse.json(
        {
          success: false,
          step: "add_sheet_entry",
          error: error.message,
        },
        { status: 500 },
      )
    }

    // T·∫°o c√°c link tr·ª±c ti·∫øp v·ªõi c√°c ƒë·ªãnh d·∫°ng kh√°c nhau ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n
    const proxyLink = `/api/image-proxy/${fileId}`
    const thumbnailLink = `https://drive.google.com/thumbnail?id=${fileId}&sz=w1000`
    const directViewLink = `https://drive.google.com/uc?export=view&id=${fileId}`

    return NextResponse.json({
      success: true,
      fileId: fileId,
      webViewLink: webViewLink,
      directLink: proxyLink,
      // Gi·ªØ c√°c link kh√°c ƒë·ªÉ tham kh·∫£o
      thumbnailLink: thumbnailLink,
      altDirectLink: directViewLink,
      message: "T·∫•t c·∫£ c√°c b∆∞·ªõc ki·ªÉm tra ƒë√£ th√†nh c√¥ng!",
    })
  } catch (error) {
    console.error("‚ùå L·ªói kh√¥ng mong ƒë·ª£i:", error)

    return NextResponse.json(
      {
        success: false,
        step: "unexpected",
        error: error.message,
      },
      { status: 500 },
    )
  }
}
